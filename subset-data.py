"""
Select the subset of the data to use in the assignment.
"""
import pandas as pd
import numpy as np

seed = [0xa6, 0xbd, 0x7d, 0x3a, 0x7a, 0xb7, 0xfe, 0x39,
        0x5d, 0x3a, 0x47, 0x66, 0xb4, 0xa0, 0xb9, 0x24,
        0x3b, 0xb2, 0xb4, 0x79, 0x96, 0x4e, 0x52, 0xcc,
        0xa5, 0x48, 0xef, 0x5a, 0x5f, 0xef, 0x6b, 0xed,
        0x0b, 0xaf, 0x19, 0x23, 0x68, 0x91, 0x53, 0x39,
        0xb2, 0xa0, 0xd0, 0xac, 0x4f, 0x5d, 0x85, 0x6b,
        0x2b, 0xc6, 0xdd, 0xef, 0x51, 0x51, 0xf6, 0x77,
        0x27, 0xbb, 0x2a, 0x69, 0x05, 0x4a, 0x8a, 0x39,
        0x41, 0x8b, 0x68, 0xe7, 0xa9, 0xad, 0x4a, 0xdc,
        0x44, 0x08, 0x75, 0x8d, 0x68, 0x42, 0x59, 0xeb,
        0x66, 0x2c, 0xee, 0xb5, 0x0a, 0xc9, 0xb6, 0x26,
        0xb8, 0xeb, 0x60, 0x87, 0x1b, 0x36, 0x27, 0x29,
        0x53, 0x2c, 0x1a, 0xe3, 0x45, 0x5e, 0x7f, 0x90,
        0x83, 0xeb, 0x57, 0xd9, 0x36, 0x3a, 0xcd, 0x90,
        0xf6, 0xfd, 0xd5, 0xb8, 0x4f, 0xfa, 0x5b, 0xf9,
        0x78, 0x8e, 0x13, 0xe5, 0x52, 0x7c, 0x78, 0xd4,
        0x48, 0x87, 0xa3, 0xfe, 0x63, 0xc7, 0xff, 0xde,
        0x02, 0xdf, 0xcf, 0xfb, 0xed, 0x2e, 0xaf, 0x79,
        0xec, 0xd3, 0x18, 0xee, 0xaf, 0xc3, 0xe9, 0x79,
        0xcf, 0xb2, 0x3a, 0x5d, 0x48, 0xc2, 0xf5, 0x13,
        0xe7, 0xd2, 0x89, 0x56, 0x8d, 0x98, 0xca, 0x86,
        0xd9, 0xb7, 0x09, 0xe7, 0x3a, 0x10, 0x81, 0x96,
        0xd1, 0xf6, 0x52, 0x0b, 0x0a, 0x7e, 0x36, 0x6a,
        0x56, 0x84, 0xa8, 0x0f, 0xb8, 0x83, 0xf1, 0x3f,
        0xed, 0x3e, 0x7a, 0xa7, 0xca, 0xd7, 0x62, 0x66,
        0x64, 0x6d, 0x27, 0x68, 0xef, 0x42, 0xbb, 0x4d,
        0x67, 0x0d, 0x56, 0x6f, 0xfc, 0x0b, 0x7f, 0x6a,
        0x81, 0xaa, 0x62, 0x6d, 0xb3, 0xde, 0xf8, 0xb8,
        0x9f, 0x51, 0x92, 0xa7, 0x89, 0xd1, 0x34, 0x25,
        0x08, 0x20, 0x93, 0xf3, 0x37, 0x81, 0xbf, 0x3f,
        0xf6, 0xdc, 0x2c, 0xf1, 0xee, 0x40, 0xc4, 0x29,
        0x57, 0x86, 0x4c, 0x48, 0x49, 0x4e, 0x53, 0xe4, ]
seed_arr = np.array(seed, dtype='uint8').view(np.uint32)
gen = np.random.default_rng(seed_arr)
retain = {}
with pd.HDFStore("monthly-data.h5", "r") as h5:
    for key in h5.keys():
        num = int(key.split("_")[-1])
        if not (120 <= num <= 600):
            continue
        temp: pd.DataFrame = h5.get(key)
        idx = gen.integers(0, temp.shape[1])
        s = temp.iloc[:, idx].astype(np.double)
        retain[s.name] = s
df = pd.DataFrame(retain)
df.to_csv("assignment-data-train.csv")
df.to_hdf("assignment-data-train.h5", "assignment_data", complevel=9)
df2: pd.DataFrame = pd.read_hdf("assignment-data-train.h5", "assignment_data")
pd.testing.assert_frame_equal(df, df2)

import hdf5storage

retain_mat = {k: np.asarray(v) for k, v in retain.items()}
hdf5storage.savemat("assignment-data-train.mat", retain_mat, appendmat=False)
mat = hdf5storage.loadmat("assignment-data-train.mat")
for key in mat:
    assert key in retain_mat
    np.testing.assert_array_equal(mat[key], retain_mat[key])
